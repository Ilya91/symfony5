version: '3'
services:
    nginx:
        build:
            context: ./app/docker/development
            dockerfile: nginx.docker
        volumes:
            - ./app:/app
        depends_on:
            - php-fpm
        ports:
            - "8080:80"
    php-fpm:
        build:
            context: ./app/docker/development
            dockerfile: php-fpm.docker
        volumes:
            - ./app:/app
        depends_on:
            - postgres
            - redis
            - queue-redis
            - storage
            - mailer
            - centrifugo
    php-cli:
        build:
            context: ./app/docker/development
            dockerfile: php-cli.docker
        volumes:
            - ./app:/app
            - composer:/root/.composer/cache
        depends_on:
            - postgres
            - redis
            - queue-redis
            - storage
            - mailer
            - centrifugo
    queue-worker:
        build:
            context: ./app/docker/development
            dockerfile: php-cli.docker
        volumes:
            - ./app:/app
            - composer:/root/.composer/cache
        depends_on:
            - postgres
            - redis
            - queue-redis
            - storage
            - mailer
            - centrifugo
        command: sh -c "until [ -f .ready ] ; do sleep 1 ; done && php bin/console messenger:consume async -vv"
    node-watch:
        image: node:12.18-alpine
        volumes:
            - ./app:/app
        working_dir: /app
        command: sh -c "until [ -f .ready ] ; do sleep 1 ; done && npm run watch"
    node:
        image: node:12.18-alpine
        volumes:
            - ./app:/app
        working_dir: /app
    postgres:
        image: postgres:13.0-alpine
        volumes:
            - postgres:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: app
            POSTGRES_PASSWORD: secret
            POSTGRES_DB: app
        ports:
            - "54321:5432"
    redis:
        image: redis:6.0.8-alpine
        volumes:
            - redis:/data
        command:
            - 'redis-server'
            - '--databases 2'
            - '--save 900 1'
            - '--save 300 10'
            - '--save 60 10000'
            - '--requirepass secret'
    queue-redis:
        image: redis:6.0.8-alpine
        volumes:
            - queue-redis:/data

    storage:
        build:
            context: ./storage/docker/development
            dockerfile: nginx.docker
        volumes:
            - ./storage:/app
        ports:
            - "8081:80"
    storage-ftp:
        image: stilliard/pure-ftpd
        environment:
            FTP_USER_NAME: app
            FTP_USER_PASS: secret
            FTP_USER_HOME: /app
        volumes:
            - ./storage/public:/app

    mailer:
        image: mailhog/mailhog
        ports:
            - "8082:8025"

    centrifugo:
        image: centrifugo/centrifugo:v2.2
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        environment:
            CENTRIFUGO_SECRET: secret
            CENTRIFUGO_API_KEY: secret
        volumes:
            - ./centrifugo/docker/development/centrifugo:/centrifugo
        ports:
            - "8083:8000"
        command: centrifugo --admin --admin_insecure

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
        environment:
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - ./storage/docker/elasticsearch:/usr/share/elasticsearch/data
        ports:
            - "9201:9200"

    rabbitmq:
        image: rabbitmq:3.8.9-management
        environment:
            RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
            RABBITMQ_DEFAULT_USER: rabbit
            RABBITMQ_DEFAULT_PASS: rabbit
        ports:
            - "8085:15672"
            - "5672:5672"
        volumes:
            - ./rabbitmq/docker/enabled_plugins:/etc/rabbitmq/enabled_plugins

volumes:
    postgres:
    redis:
    queue-redis:
    composer:
